<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:p1="clr-namespace:Bonsai.uEye;assembly=Bonsai.uEye"
                 xmlns:wie="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input"
                 xmlns:p2="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:dsp="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:uEyeCapture">
          <p1:DeviceId xsi:nil="true" />
          <p1:ConfigFile>C:\Users\Experimenter\Documents\bonsai_zfshoaling\2048x1380_30fps_slowClock_4.92.ini</p1:ConfigFile>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Image</Selector>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>WatchKey</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>A</wie:Filter>
                <wie:SuppressRepetitions>false</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Equal">
              <Operand xsi:type="WorkflowProperty" TypeArguments="p2:Keys">
                <Value>A</Value>
              </Operand>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Value" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="BooleanProperty">
                <Value>false</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="Condition">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>ROI Segmentation</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Item2</Selector>
                  </Expression>
                  <Expression xsi:type="BitwiseNot" />
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="dsp:RunningAverage">
                <dsp:Alpha>0.05</dsp:Alpha>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Size</Selector>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="rows" />
              <Property Name="cols" />
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>ROI number</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Value" DisplayName="rows" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="IntProperty">
                      <Value>5</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Value" DisplayName="cols" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="IntProperty">
                      <Value>7</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Zip" />
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="4" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source2" />
                  <Edge From="4" To="5" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>from System import Tuple
from System.Collections.Generic import IList

@returns(Tuple[int,int,int])
def process(value):

  w=value.Item1.Width/value.Item2.Item2
  h=value.Item1.Height/value.Item2.Item1
  rad=(w+h)/4
  minRad=int(rad-rad*0.15)
  maxRad=int(rad+rad*0.15)
  minDist=int(rad*1.55)
  return Tuple.Create(minRad,maxRad,minDist)</scr:Script>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="MinRadius" Selector="Item1" />
                <Property Name="MaxRadius" Selector="Item2" />
                <Property Name="MinDistance" Selector="Item3" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:HoughCircles">
                <cv:AccumulatorFactor>20</cv:AccumulatorFactor>
                <cv:MinDistance>213</cv:MinDistance>
                <cv:Param1>50</cv:Param1>
                <cv:Param2>100</cv:Param2>
                <cv:MinRadius>127</cv:MinRadius>
                <cv:MaxRadius>156</cv:MaxRadius>
              </Combinator>
            </Expression>
            <Expression xsi:type="SelectMany">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Concat" />
                  </Expression>
                  <Expression xsi:type="scr:PythonTransform">
                    <scr:Script>from System import Tuple
@returns(Tuple[int,int,int,int,int,int])
def process(value):

  xc= int(value.Center.X)
  yc= int(value.Center.Y)
  r = int(value.Radius)
  x = xc-(r+2)
  y = yc-(r+2)
  wh=(r+2)*2

  return Tuple.Create(x,y,wh,xc,yc,r)</scr:Script>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Length</Selector>
                  </Expression>
                  <Expression xsi:type="PropertyMapping">
                    <PropertyMappings>
                      <Property Name="Count" />
                    </PropertyMappings>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Take">
                      <rx:Count>35</rx:Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:ToList" />
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="0" To="3" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="5" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source2" />
                  <Edge From="5" To="6" Label="Source1" />
                  <Edge From="6" To="7" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>from System import Tuple
from System.Collections.Generic import IList

@returns(IList[Tuple[int,int,int,int,int,int]])
def process(value):

  tupAll=[]
  tupRoundAll=[]
  for c in value:
    x=c.Item1
    xr=(x/180)*180
    y=c.Item2
    yr=(y/180)*180
    w=c.Item3
    xc=c.Item4
    yc=c.Item5
    r=c.Item6
    
    tupAll.append((x,y,w,xc,yc,r))
    tupRoundAll.append((yr,xr))
  
  so=[i[0] for i in sorted(enumerate(tupRoundAll), key=lambda x:x[1])]

  s=[tupAll[i] for i in so]

  return [Tuple.Create(x[0],x[1],x[2],x[3],x[4],x[5]) for x in s]</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="11" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="8" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source2" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source2" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>SaveToCSV</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="SelectMany">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Item1</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Concat" />
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>import clr
from System import Array, Single, Random,Tuple

@returns(str)
def process(value):
  allwells=[]

  x = value.Item1
  y=value.Item2
  wh=value.Item3
  xc=value.Item4
  yc=value.Item5
  r=value.Item6

  welldata = (x, y, wh,xc,yc,r)
  wellstr = "%i %i %i %i %i %i" % welldata
  allwells.append(wellstr)
  return " ".join(allwells)</scr:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="io:TextWriter">
                <io:FileName>E:\00_bonsai_ffmpeg_out\ROIdef.csv</io:FileName>
                <io:Suffix>Timestamp</io:Suffix>
                <io:Buffered>true</io:Buffered>
                <io:Overwrite>false</io:Overwrite>
                <io:Append>true</io:Append>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="3" Label="Source1" />
      <Edge From="2" To="3" Label="Source2" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="3" To="6" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="7" Label="Source2" />
      <Edge From="6" To="7" Label="Source1" />
      <Edge From="7" To="8" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>