<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:p1="clr-namespace:Bonsai.uEye;assembly=Bonsai.uEye"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:scr="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting"
                 xmlns:gl="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders"
                 xmlns:p2="clr-namespace:Bonsai.joh.Vision;assembly=BonsaiPackage5"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="p1:uEyeCapture">
            <p1:DeviceId xsi:nil="true" />
            <p1:ConfigFile>2048x1380_30fps_slowClock_4.92.ini</p1:ConfigFile>
          </Combinator>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="MemberSelector">
          <Selector>Image</Selector>
        </Builder>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="cv:BackgroundSubtraction">
            <cv:BackgroundFrames>120</cv:BackgroundFrames>
            <cv:AdaptationRate>0.001</cv:AdaptationRate>
            <cv:ThresholdValue>0</cv:ThresholdValue>
            <cv:ThresholdType>ToZero</cv:ThresholdType>
            <cv:SubtractionMethod>Dark</cv:SubtractionMethod>
          </Combinator>
        </Builder>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>pairList</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="FileName" />
            </Expression>
            <Expression xsi:type="io:CsvReader">
              <io:FileName>C:\Users\jlarsch\Documents\00_work\demoVideos\35Animals\PL_35_eachWithLast.txt</io:FileName>
              <io:ScanPattern>%s</io:ScanPattern>
              <io:SkipRows>0</io:SkipRows>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:ToList" />
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Name>splitPairList</scr:Name>
              <scr:Script>@returns(list)
def process(value):
  pairList=[]
  for l in value:
    pairList.append([int(x) for x in l.split()])
  return pairList</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:UpdateFrame" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:UpdateRenderState">
          <gl:RenderState>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>Blend</gl:Capability>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:BlendFunctionState">
              <gl:SourceFactor>SrcAlpha</gl:SourceFactor>
              <gl:DestinationFactor>OneMinusSrcAlpha</gl:DestinationFactor>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:DepthFunctionState">
              <gl:Function>Lequal</gl:Function>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>Multisample</gl:Capability>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>PolygonSmooth</gl:Capability>
            </gl:StateConfiguration>
          </gl:RenderState>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>trajectory file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Count" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="FileName" />
            </Expression>
            <Expression xsi:type="io:CsvReader">
              <io:FileName>E:\b\2018\trajectories_35PlateLoomPilot_test.csv</io:FileName>
              <io:ScanPattern>%s,%f,%f,%f,%f,%f</io:ScanPattern>
              <io:SkipRows>0</io:SkipRows>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:RepeatCount">
                <rx:Count>30</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="3" Label="Source2" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ROI file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="FileName" />
            </Expression>
            <Expression xsi:type="io:CsvReader">
              <io:FileName>C:\Users\jlarsch\Documents\00_work\demoVideos\35Animals\ROIdef2020-01-29T15_27_53.csv</io:FileName>
              <io:ScanPattern>%i %i %i %i %i %i</io:ScanPattern>
              <io:SkipRows>0</io:SkipRows>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:ToList" />
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>calibration file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="FileName" />
            </Expression>
            <Expression xsi:type="io:CsvReader">
              <io:FileName>C:\Users\jlarsch\Documents\00_work\demoVideos\35Animals\calibrationOut2020-01-29T15_32_15.csv</io:FileName>
              <io:ScanPattern>%s</io:ScanPattern>
              <io:SkipRows>0</io:SkipRows>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Name>split_hMat</scr:Name>
              <scr:Script>from System import Array
@returns(Array)
def process(value):
  return Array[float]([float(el) for el in value.split()])</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>camHeight</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="FileName" />
            </Expression>
            <Expression xsi:type="io:CsvReader">
              <io:FileName>C:\Users\jlarsch\Documents\00_work\demoVideos\35Animals\camHeight.csv</io:FileName>
              <io:ScanPattern>%s</io:ScanPattern>
              <io:SkipRows>0</io:SkipRows>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:ToList" />
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Name>splitCamList</scr:Name>
              <scr:Script>import os
from System import Tuple
import datetime

@returns(Tuple[int,str])
def process(value):
  CamList=[]
  for l in value:
    CamList.append([x for x in l.split()])

  pcName=os.environ['COMPUTERNAME']
  currentTime=datetime.datetime.now().strftime('%Y%m%d%H%M%S')

  

  camHeight=-1
  for c in CamList:
    if c[0]==pcName:
      camHeight=int(c[1])

  saveSet=[currentTime,pcName,str(camHeight)+" "]
  return Tuple.Create(camHeight," ".join(saveSet))


  </scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FileCapture">
          <cv:FileName>C:\Users\jlarsch\Documents\00_work\demoVideos\35Animals\out_id0_30fps_20200129153339.avi</cv:FileName>
          <cv:PlaybackRate>30</cv:PlaybackRate>
          <cv:StartPosition>0</cv:StartPosition>
          <cv:PositionUnits>Frames</cv:PositionUnits>
          <cv:Loop>false</cv:Loop>
          <cv:Playing>true</cv:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Threshold">
          <cv:ThresholdValue>8</cv:ThresholdValue>
          <cv:MaxValue>255</cv:MaxValue>
          <cv:ThresholdType>Binary</cv:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Concat" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property Name="RegionOfInterest" Selector="Item2.Item1,Item2.Item2,Item2.Item3,Item2.Item3" />
              </PropertyMappings>
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Crop">
                <cv:RegionOfInterest>
                  <cv:X>1766</cv:X>
                  <cv:Y>1106</cv:Y>
                  <cv:Width>248</cv:Width>
                  <cv:Height>248</cv:Height>
                </cv:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FindContours">
                <cv:Mode>External</cv:Mode>
                <cv:Method>ChainApproxNone</cv:Method>
                <cv:Offset>
                  <cv:X>0</cv:X>
                  <cv:Y>0</cv:Y>
                </cv:Offset>
                <cv:MinArea>4</cv:MinArea>
                <cv:MaxArea>500</cv:MaxArea>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="p2:HeadingFromOrientation" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:ToList" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item3</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item4</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2.Size</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item5</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="0" To="3" Label="Source1" />
            <Edge From="0" To="12" Label="Source1" />
            <Edge From="0" To="13" Label="Source1" />
            <Edge From="0" To="14" Label="Source1" />
            <Edge From="0" To="15" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="1" To="16" Label="Source2" />
            <Edge From="2" To="4" Label="Source2" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="16" Label="Source1" />
            <Edge From="12" To="16" Label="Source3" />
            <Edge From="13" To="16" Label="Source4" />
            <Edge From="14" To="16" Label="Source5" />
            <Edge From="15" To="16" Label="Source6" />
            <Edge From="16" To="17" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="scr:PythonTransform">
        <scr:Script>import sys
import clr
clr.AddReference("OpenTK")
from OpenTK import Vector3
from System import Array, Tuple, Single

#sys.path.append('C:\\Users\\baierlab\\Documents\\bonsai_zfshoaling\\python')
sys.path.append('C:\\Users\\jlarsch\\Documents\\bonsai_zfshoaling\\python')
import CameraInterceptCorrection as cic
import geometry as geo
import skypeShoal as sS
import math

allCoor=[]
oldCoor=[]
posList=[]
fr=0

@returns(Tuple[str,Array[Vector3],Tuple[Single,Single],str,str,Tuple[bool,Single,Single,Single,str],list])
def process(value):
  global allCoor,oldCoor,fr,posList

  xMax = float(value.Item1.Item5.Width) # video dimensions, relevant to openGL stimulus scaling
  yMax = float(value.Item1.Item5.Height)
  bgCol = value.Item2.Item5 # color of stimulus background
  DotCol = value.Item2.Item6 # color of dot stimuli
  sp = value.Item2.Item4  # sprite point size
  hArr =value.Item1.Item4 #projector-camera calibration matrix

  #Use episode number to infer stimulation mode.
  eName = value.Item2.Item1
  grat=eName[:4]=='grat' # grating mode
  CL = eName[:2]=='CL'

  if CL: # closed loop mode
    FlexPair=False
    CLmode=eName[2:6]=='full' # this should be semi:0 or full:1
    #semi: anchor stimulus position to animal position at defined frame but don't update with subsequent animal motion.
    #full: keep anchoring stimulus position to animal position.
    if CLmode:
      posPick=1
    else:
      posPick=int(eName[6:9]) # time interval (frames) for anchoring stimuli in semi CL mode.
  else:
    FlexPair=eName[:2]=='FP'

  # generate string to save as experiment parameters not part of position output.
  saveSettings=[str(CL),str(FlexPair),str(xMax),str(yMax)]
  #print(eName,grat)

  if grat:
    contrast=Single(float(eName[4:7])/100.)
    freq=Single(float(eName[7:10]))
    speed=Single(float(eName[10:13]))
    LR=eName[13]
    #print(len(allheading),allheading[1])
  else:
    contrast=Single(1.)
    speed=Single(1.)
    freq=Single(1.)
    LR=None

  pairList=sS.getPairList(value, FlexPair) #animal pair matrix

  # get current animal positions in list and str format
  allCoor, allwells=sS.getAnimalCoors(value,allCoor)


  if CL:
    if fr==0:
      posList=allCoor
    fr+=1
    if fr==posPick:
      fr=0

  toDraw=[]
  drawStr=[]
  allheading=[]
  for i,p in enumerate(allCoor):

    if LR=='L':
      allheading.append(p[4]+math.pi/2.)
    else:
      allheading.append((p[4]-math.pi)+math.pi/2.)
    #p: point to be drawn (unless in skype mode, ones should only be in i=15 or 35 (last animal)
    l=pairList[i] #find where to draw it (which dish)
    for ii,pp in enumerate(l):
      if pp==1: #draw into dish ii

        if CL: # for 'closed loop', place stimuli relative to defined position
          x,y=sS.CLstim(value,allCoor,posList,p,ii,CLmode)

        else:
          x=p[0]+allCoor[ii][2] #add offsets of current dish
          y=p[1]+allCoor[ii][3]
          
        x,y=geo.transf(x,y,hArr) ##projector-camera calibration
        x=geo.toGL(x,xMax) # transform to openGL coordinates
        y=-geo.toGL(y,yMax)

        toDraw.append([x,y,sp]) 
        wellStr = "%0.f %0.f" % (x,y)
        drawStr.append(wellStr)
  
  ar=sS.listToTkArray(toDraw)
  
  return Tuple.Create(" ".join(allwells),ar,Tuple.Create(Single(bgCol),Single(DotCol))," ".join(drawStr)," ".join(saveSettings),Tuple.Create(grat,contrast,speed,freq,eName),allheading)

def unload():
  global allCoor,oldCoor,fr,posList
  allCoor=None
  oldCoor=None
  fr=None
  posList=None</scr:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item1</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="io:TextWriter">
          <io:FileName>c:\00_bonsai_ffmpeg_out\PositionTxt_allROI.txt</io:FileName>
          <io:Suffix>Timestamp</io:Suffix>
          <io:Buffered>true</io:Buffered>
          <io:Overwrite>false</io:Overwrite>
          <io:Append>false</io:Append>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item2,Item3</Selector>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>GLdraw</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source2</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:DrawArrays">
                <gl:ShaderName>Particles</gl:ShaderName>
                <gl:DrawMode>Points</gl:DrawMode>
                <gl:Usage>DynamicDraw</gl:Usage>
                <gl:VertexAttributes>
                  <gl:VertexAttributeMapping>
                    <gl:Size>3</gl:Size>
                    <gl:Normalized>false</gl:Normalized>
                    <gl:Type>Float</gl:Type>
                  </gl:VertexAttributeMapping>
                </gl:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2.Item2</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateUniform">
                <gl:UniformName>colBG</gl:UniformName>
                <gl:ShaderName>Particles</gl:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateUniform">
                <gl:UniformName>colBG</gl:UniformName>
                <gl:ShaderName>bg</gl:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateUniform">
                <gl:UniformName>colDot</gl:UniformName>
                <gl:ShaderName>Particles</gl:ShaderName>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="2" Label="Source1" />
            <Edge From="1" To="2" Label="Source2" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="2" To="5" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="5" To="9" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source2</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item5</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Value" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Add">
              <Operand xsi:type="StringProperty">
                <Value>True False 2048.0 1380.0</Value>
              </Operand>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="io:TextWriter">
                <io:FileName>C:\00_bonsai_ffmpeg_out\saveSettings.txt</io:FileName>
                <io:Suffix>Timestamp</io:Suffix>
                <io:Buffered>true</io:Buffered>
                <io:Overwrite>false</io:Overwrite>
                <io:Append>false</io:Append>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="5" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source2" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="5" To="7" Label="Source1" />
            <Edge From="6" To="9" Label="Source2" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Item6,Item7</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>drawGrating</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Item1.Item1.Item1</Selector>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2.EventArgs.Time</Selector>
            </Expression>
            <Expression xsi:type="rx:Accumulate" />
            <Expression xsi:type="scr:ExpressionTransform">
              <scr:Expression>single(it)</scr:Expression>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>5</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item4,Item3,Item1.Item2</Selector>
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *

xMax=2048.0 #relevant for openGL scaling
yMax=1380.0

def transf(x,y,hArr):

  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y

@returns(Mat)
def process(value):
  hArr =value.Item2


  x = [r.Item4 for r in value.Item1]
  y = [r.Item5 for r in value.Item1]

  for i in range(len(x)):
    
    
    
    x[i]=x[i]-(x[i]-xMax/2.)/(180)
    y[i]=y[i]-(y[i]-yMax/2.)/(180)
    x[i],y[i]=transf(x[i],y[i],hArr)
    x[i]=(2*(x[i]-xMax/2))/xMax
    y[i]=(-2*(y[i]-yMax/2))/yMax

  
  xyh=sum(zip(x, y,value.Item3), ()) 
  tmpAll=[]
  for i in range(len(x)):
    tmpAll.append([x[i],y[i],value.Item3[i]])
    #if i==0:
      #print(tmpAll[-1])

  #xyhA=Array[Vector3]([Vector3(x[0], x[1], x[2]) for x in tmpAll])
  

  xyhA = Array[float](xyh)


  xyhm = Mat.FromArray(xyhA, len(value.Item1), 3, Depth.F64, 1)

  return xyhm</scr:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateVertexBuffer">
                <gl:MeshName>Waveform</gl:MeshName>
                <gl:DrawMode>Points</gl:DrawMode>
                <gl:Usage>DynamicDraw</gl:Usage>
                <gl:VertexAttributes>
                  <gl:VertexAttributeMapping>
                    <gl:Size>3</gl:Size>
                    <gl:Normalized>false</gl:Normalized>
                    <gl:Type>Double</gl:Type>
                  </gl:VertexAttributeMapping>
                </gl:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item1.Item1</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateUniform">
                <gl:UniformName>contrast</gl:UniformName>
                <gl:ShaderName>Waveform</gl:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item3</Selector>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Value" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>10</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Multiply" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateUniform">
                <gl:UniformName>phase</gl:UniformName>
                <gl:ShaderName>Waveform</gl:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:DrawMesh">
                <gl:ShaderName>Waveform</gl:ShaderName>
                <gl:MeshName>Waveform</gl:MeshName>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Item4</Selector>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Value" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>15</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="gl:UpdateUniform">
                <gl:UniformName>frequency</gl:UniformName>
                <gl:ShaderName>Waveform</gl:ShaderName>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="1" To="6" Label="Source1" />
            <Edge From="1" To="11" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="2" To="5" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="17" Label="Source1" />
            <Edge From="4" To="16" Label="Source1" />
            <Edge From="5" To="8" Label="Source2" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="11" To="14" Label="Source1" />
            <Edge From="11" To="21" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="14" To="15" Label="Source1" />
            <Edge From="15" To="16" Label="Source2" />
            <Edge From="16" To="17" Label="Source2" />
            <Edge From="17" To="18" Label="Source1" />
            <Edge From="18" To="19" Label="Source1" />
            <Edge From="19" To="20" Label="Source1" />
            <Edge From="20" To="23" Label="Source1" />
            <Edge From="21" To="22" Label="Source1" />
            <Edge From="22" To="23" Label="Source2" />
            <Edge From="23" To="24" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ffmpeg</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="scr:PythonSource">
              <scr:Script>import datetime
@returns(str)
def generate():
  currentTime=datetime.datetime.now()
  yield currentTime.strftime('%Y%m%d%H%M%S')</scr:Script>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Width</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Height</Selector>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="codec q" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="cam id" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>0</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="vid fps" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>30</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="scr:PythonTransform">
              <scr:Script>import subprocess as sp
import datetime

@returns(bool)
def process(inputs):

  vid_width=str(inputs.Item5)
  vid_height=str(inputs.Item6)
  vid_rate=str(inputs.Item1)
  currentTime=inputs.Item2
  cam_id=str(inputs.Item3)
  codec_q=str(inputs.Item4)

  cmd='c:\\ffmpeg\\bin\\ffmpeg.exe -y -f rawvideo -vcodec rawvideo -s '+vid_width+'x'+vid_height+' -r '+vid_rate+' -pix_fmt gray -i \\\\.\\pipe\\p1 -q:v '+codec_q+' -vcodec mpeg4 -vtag xvid c:\\00_bonsai_ffmpeg_out\\out_id'+cam_id+'_'+vid_rate+'fps'+'_'+currentTime+'.avi'

  #cmd='c:\\ffmpeg\\bin\\ffmpeg.exe -y -f rawvideo -vcodec rawvideo -s '+vid_width+'x'+vid_height+' -r '+vid_rate+' -pix_fmt gray -i \\\\.\\pipe\\p1 -q:v '+codec_q+' -vcodec mpeg4 -vtag xvid e:\\00_bonsai_ffmpeg_out\\out_id'+cam_id+'_'+vid_rate+'fps'+'_'+currentTime+'.avi'
  sp.Popen(cmd)
  return True</scr:Script>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="11" Label="Source3" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="1" To="3" Label="Source1" />
            <Edge From="1" To="4" Label="Source1" />
            <Edge From="2" To="11" Label="Source6" />
            <Edge From="3" To="11" Label="Source7" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="11" Label="Source5" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="11" Label="Source4" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source2" />
            <Edge From="11" To="12" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:ImageWriter">
          <cv:Path>\\.\pipe\p1</cv:Path>
          <cv:Suffix>None</cv:Suffix>
          <cv:Overwrite>false</cv:Overwrite>
        </Combinator>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="3" To="14" Label="Source3" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="24" Label="Source2" />
      <Edge From="5" To="21" Label="Source1" />
      <Edge From="6" To="16" Label="Source2" />
      <Edge From="7" To="14" Label="Source1" />
      <Edge From="7" To="24" Label="Source4" />
      <Edge From="8" To="14" Label="Source4" />
      <Edge From="8" To="24" Label="Source3" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="9" To="22" Label="Source1" />
      <Edge From="10" To="14" Label="Source5" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="12" To="26" Label="Source1" />
      <Edge From="13" To="14" Label="Source2" />
      <Edge From="14" To="15" Label="Source1" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="17" To="18" Label="Source1" />
      <Edge From="17" To="20" Label="Source1" />
      <Edge From="17" To="22" Label="Source2" />
      <Edge From="17" To="23" Label="Source1" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="20" To="21" Label="Source2" />
      <Edge From="23" To="24" Label="Source1" />
      <Edge From="24" To="25" Label="Source1" />
      <Edge From="26" To="27" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>