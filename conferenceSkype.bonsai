<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q2="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q3="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:q7="clr-namespace:Bonsai.uEye;assembly=Bonsai.uEye" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q5="clr-namespace:Bonsai.joh.Vision;assembly=BonsaiPackage5" xmlns:q4="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders" xmlns:q6="clr-namespace:Bonsai.Reactive;assembly=BonsaiPackage1" xmlns:q1="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="NestedWorkflow">
        <Name>save in chunks</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Switch" />
            </Expression>
            <Expression xsi:type="BehaviorSubject">
              <Name>pipeName</Name>
            </Expression>
            <Expression xsi:type="WindowWorkflow">
              <Name>save video and Text</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="NestedWorkflow">
                    <Name>ffmpeg</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="IntProperty">
                            <Value>30</Value>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="Zip" />
                        </Expression>
                        <Expression xsi:type="q1:PythonTransform">
                          <q1:Script>import subprocess as sp
import datetime

@returns(bool)
def process(inputs):

  vid_width=str(inputs.Item4.Item1.Item1.Width)
  vid_height=str(inputs.Item4.Item1.Item1.Height)
  vid_rate=str(inputs.Item1)
  cam_id=str(inputs.Item2)
  codec_q=str(inputs.Item3)

  pipe=inputs.Item4.Item1.Item2

  fname = inputs.Item4.Item2 +pipe[-15:] + '.avi'


  cmd='c:\\ffmpeg\\bin\\ffmpeg.exe -y -f rawvideo -vcodec rawvideo -s '+vid_width+'x'+vid_height+' -r '+vid_rate+' -pix_fmt gray -i ' +pipe+' -q:v '+codec_q+' -vcodec mpeg4 -vtag xvid ' +fname
  sp.Popen(cmd)
  return True</q1:Script>
                        </Expression>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="IntProperty">
                            <Value>5</Value>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="IntProperty">
                            <Value>0</Value>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
                          <MemberName>Value</MemberName>
                          <Name>codec q</Name>
                          <Value>5</Value>
                        </Expression>
                        <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
                          <MemberName>Value</MemberName>
                          <Name>cam id</Name>
                          <Value>0</Value>
                        </Expression>
                        <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
                          <MemberName>Value</MemberName>
                          <Name>vid fps</Name>
                          <Value>30</Value>
                        </Expression>
                      </Nodes>
                      <Edges>
                        <Edge>
                          <From>0</From>
                          <To>1</To>
                          <Label>Source2</Label>
                        </Edge>
                        <Edge>
                          <From>1</From>
                          <To>2</To>
                          <Label>Source1</Label>
                        </Edge>
                        <Edge>
                          <From>3</From>
                          <To>1</To>
                          <Label>Source5</Label>
                        </Edge>
                        <Edge>
                          <From>3</From>
                          <To>4</To>
                          <Label>Source1</Label>
                        </Edge>
                        <Edge>
                          <From>5</From>
                          <To>1</To>
                          <Label>Source4</Label>
                        </Edge>
                        <Edge>
                          <From>6</From>
                          <To>1</To>
                          <Label>Source3</Label>
                        </Edge>
                        <Edge>
                          <From>7</From>
                          <To>5</To>
                          <Label>Source1</Label>
                        </Edge>
                        <Edge>
                          <From>8</From>
                          <To>6</To>
                          <Label>Source1</Label>
                        </Edge>
                        <Edge>
                          <From>9</From>
                          <To>0</To>
                          <Label>Source1</Label>
                        </Edge>
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="CombineLatest" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q2:ImageWriter">
                      <q2:Path>\\.\pipe\p2018051822104669</q2:Path>
                      <q2:Suffix>None</q2:Suffix>
                      <q2:Overwrite>false</q2:Overwrite>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="ExternalizedPropertyOfStringImageWriter">
                    <MemberName>Path</MemberName>
                    <Name>Path</Name>
                    <Value>\\.\pipe\video_all0</Value>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="SubscribeWhen" />
                  </Expression>
                  <Expression xsi:type="ReplaySubject">
                    <Name>FrameSize</Name>
                    <BufferSize xsi:nil="true" />
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>pipeName</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Item2</Selector>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>pipeName</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Timer">
                      <DueTime>PT2S</DueTime>
                      <Period>PT0S</Period>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Zip" />
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>FrameSize</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Size</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Take">
                      <Count>1</Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>DataPath</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q3:TextWriter">
                      <q3:FileName>E:\00_bonsai_ffmpeg_out\longRec\018051822104669.csv</q3:FileName>
                      <q3:Suffix>None</q3:Suffix>
                      <q3:Buffered>true</q3:Buffered>
                      <q3:Overwrite>false</q3:Overwrite>
                      <q3:Append>false</q3:Append>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Item1</Selector>
                  </Expression>
                  <Expression xsi:type="ExternalizedPropertyOfStringTextWriter">
                    <MemberName>FileName</MemberName>
                    <Name>FileName</Name>
                    <Value>E:\00_bonsai_ffmpeg_out\PositionTxt_allROI.txt</Value>
                  </Expression>
                  <Expression xsi:type="q1:PythonTransform">
                    <q1:Script>@returns(str)
def process(inputs):


  return inputs.Item1 + inputs.Item2[-15:] + '.csv'</q1:Script>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>pipeName</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Zip" />
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>DataPath</Name>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>1</From>
                    <To>0</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>2</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>4</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>6</From>
                    <To>3</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>7</From>
                    <To>8</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>7</From>
                    <To>17</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>8</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>8</From>
                    <To>13</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>9</From>
                    <To>11</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>10</From>
                    <To>4</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>11</From>
                    <To>5</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>12</From>
                    <To>4</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>13</From>
                    <To>14</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>14</From>
                    <To>11</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>15</From>
                    <To>1</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>17</From>
                    <To>16</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>18</From>
                    <To>16</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>19</From>
                    <To>18</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>20</From>
                    <To>21</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>21</From>
                    <To>19</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>22</From>
                    <To>21</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="NestedWorkflow">
              <Name>generate chunk name</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="Add" />
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="CombineLatest" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="StringProperty">
                      <Value>\\.\pipe\p</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="q1:PythonSource">
                    <q1:Script>import datetime
@returns(str)
def generate():
  currentTime=datetime.datetime.now()
  yield currentTime.strftime('%Y%m%d%H%M%S')</q1:Script>
                  </Expression>
                  <Expression xsi:type="q1:ExpressionTransform">
                    <q1:Expression>it.ToString()</q1:Expression>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Index</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Index" />
                  </Expression>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>8</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>1</From>
                    <To>0</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>1</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>4</From>
                    <To>1</To>
                    <Label>Source3</Label>
                  </Edge>
                  <Edge>
                    <From>5</From>
                    <To>4</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>6</From>
                    <To>5</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>7</From>
                    <To>6</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="TimeSpanWindow">
                <TimeSpan>PT2H</TimeSpan>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="ExternalizedTimeSpanOfTimeSpanWindow">
              <MemberName>TimeSpan</MemberName>
              <Name>TimeSpan</Name>
              <Value>PT2H</Value>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>2</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>4</To>
              <Label>Source2</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>drawGrating</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:DrawMesh">
                <q4:ShaderName>Waveform</q4:ShaderName>
                <q4:MeshName>Waveform</q4:MeshName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:UpdateUniform">
                <q4:UniformName>frequency</q4:UniformName>
                <q4:ShaderName>Waveform</q4:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:UpdateVertexBuffer">
                <q4:MeshName>Waveform</q4:MeshName>
                <q4:DrawMode>Points</q4:DrawMode>
                <q4:Usage>DynamicDraw</q4:Usage>
                <q4:VertexAttributes>
                  <q4:VertexAttributeMapping>
                    <q4:Size>2</q4:Size>
                    <q4:Normalized>false</q4:Normalized>
                    <q4:Type>Double</q4:Type>
                  </q4:VertexAttributeMapping>
                </q4:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:UpdateUniform">
                <q4:UniformName>phase</q4:UniformName>
                <q4:ShaderName>Waveform</q4:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>20</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="q1:ExpressionTransform">
              <q1:Expression>single(it)</q1:Expression>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="Accumulate" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Take">
                <Count>5</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *

xMax=2048.0 #relevant for openGL scaling
yMax=1280.0

def transf(x,y,hArr):

  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y

@returns(Mat)
def process(value):
  hArr =value.Item2


  x = [r.Item4 for r in value.Item1]
  y = [r.Item5 for r in value.Item1]
  scale=xMax/52.
  for i in range(len(x)):
    
    
    
    x[i]=x[i]-(x[i]-xMax/2.)/(79*scale)
    y[i]=y[i]-(y[i]-yMax/2.)/(79*scale)
    x[i],y[i]=transf(x[i],y[i],hArr)
    x[i]=(2*(x[i]-xMax/2))/xMax
    y[i]=(-2*(y[i]-yMax/2))/yMax

  
  xy=sum(zip(x, y), ()) 

  xyA = Array[float](xy)


  xym = Mat.FromArray(xyA, len(value.Item1), 2, Depth.F64, 1)

  return xym</q1:Script>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.EventArgs.Time</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item3,Source.Item4</Selector>
            </Expression>
            <Expression xsi:type="Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Item1</Selector>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Multiply" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>16</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>16</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>16</From>
              <To>17</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>17</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>GLdraw</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:DrawArrays">
                <q4:ShaderName>Particles</q4:ShaderName>
                <q4:DrawMode>Points</q4:DrawMode>
                <q4:Usage>DynamicDraw</q4:Usage>
                <q4:VertexAttributes>
                  <q4:VertexAttributeMapping>
                    <q4:Size>3</q4:Size>
                    <q4:Normalized>false</q4:Normalized>
                    <q4:Type>Float</q4:Type>
                  </q4:VertexAttributeMapping>
                </q4:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:UpdateUniform">
                <q4:UniformName>colBG</q4:UniformName>
                <q4:ShaderName>bg</q4:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:UpdateUniform">
                <q4:UniformName>colDot</q4:UniformName>
                <q4:ShaderName>Particles</q4:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:UpdateUniform">
                <q4:UniformName>colBG</q4:UniformName>
                <q4:ShaderName>Particles</q4:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.Item3</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source2</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>3</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item1</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2,Source.Item3,Source.Item4</Selector>
      </Expression>
      <Expression xsi:type="q1:ExpressionTransform">
        <q1:Expression>(it%10)&lt;-5</q1:Expression>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q4:UpdateFrame" />
      </Expression>
      <Expression xsi:type="q1:PythonTransform">
        <q1:Name>Generate Stimuli</q1:Name>
        <q1:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math

xMax=2048.0 #relevant for openGL scaling
yMax=1280.0
allCoor=[]
oldCoor=[]
posPick=300
fr=0
posList=[]
CL=False
FlexPair=True

def correctFish(x,y,xOff,yOff,xMax,xMaxCm):

  scale=xMax/xMaxCm
  xR=x+xOff
  yR=y+yOff

  xR=xR-(scale*(xR-xMax/2.)/(105*scale))
  yR=yR-(scale*(yR-yMax/2.)/(105*scale))

  return xR-xOff,yR-yOff


def transf(x,y,hArr):

  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y

def toGL(c,cMax):
  return int(2*(c-cMax/2))/cMax


@returns(Tuple[str,Array[Vector3],Single,Single,str])
def process(value):
  global allCoor,xMax,yMax,oldCoor,fr,posList

  allwells=[]
  oldCoor=allCoor
  allCoor=[]
  bgCol=0
  DotCol=1
  i=0

#Item1: (zip)
#  Item1: contour
#  Item2: ROI
#  Item3: animal pair matrix
#  Item4: projector-camera calibration matrix
#Item2: (Trajector File)


  for w in range(len(value.Item1.Item1)):

    well=value.Item1.Item1[w]
    xoff=value.Item1.Item2[i].Item1
    yoff=value.Item1.Item2[i].Item2

    #Also correct dish ROI! Added 7-19-2017
    xoff,yoff = correctFish(xoff,yoff,0,0,xMax,53.)

    x = well.Centroid.X
    y = well.Centroid.Y
    o=well.Orientation

    #use previous coordinates if current coordinates are NaN
    if math.isnan(x):
      if len(oldCoor)&gt;0:
        x=oldCoor[w][0]
        y=oldCoor[w][1]
        xoff=oldCoor[w][2]
        yoff=oldCoor[w][3]
        o=oldCoor[w][4]
    else:
      x,y = correctFish(x,y,xoff,yoff,xMax,53.)



    i+=1

    welldata = ((round(x)), (round(y)), o)
    allCoor.append([x,y,xoff,yoff,o])
    wellstr = "%0.f %0.f %0.3f" % welldata
    allwells.append(wellstr)

  if CL:
    
    if fr==0:
      posList=allCoor
      fr=0
    fr+=1
    if fr==posPick:
      fr=0
    

  #add one more row, representing pre recorded trajectory, episode name and disc size for visual stimulation
  xp=value.Item2.Item2
  yp=value.Item2.Item3
  sp=value.Item2.Item4 #sprite point size
  bgCol=value.Item2.Item5
  DotCol=value.Item2.Item6


  eName=value.Item2.Item1

  welldata = ((round(xp)), (round(yp)), sp,eName)
  allCoor.append([xp,yp,xoff,yoff,sp])
  wellstr = "%0.f %0.f %0.f %s" % welldata
  allwells.append(wellstr)

  toDraw=[]

  if FlexPair:
    pairListNr=int(eName[:2])
    drawList=value.Item1.Item3[pairListNr*16:(pairListNr+1)*16]
  else:
    drawList=value.Item1.Item3 #animal pair matrix

  hArr =value.Item1.Item4 #projector-camera calibration matrix
  
  scale=xMax/53.

  drawStr=[]
  for i in range(len(allCoor)):
    p=allCoor[i] #point to be drawn (unless in skype mode, ones should only be in i=15 (last animal)
    l=drawList[i] #find where to draw it (which dish)
    for ii in range(len(l)):
      
      if l[ii]==1: #draw into dish ii

        if CL:
          o=posList[ii][4]#+math.pi
          xo=posList[ii][0]
          yo=posList[ii][1]
          
          dx=p[0]
          dy=p[1]

          dist=math.sqrt((dx**2)+(dy**2))
          if dist==0:
            dist=1
          
          phi=math.asin(dx/dist)
          

          heading=-o+(math.pi*(1/2.))
          #heading=o+(math.pi*(1/2))

          

          x=math.sin(heading+phi)*dist
          y=math.cos(heading+phi)*dist
          #print 'x',x,'y',y,'dist',dist,'phi',phi,'o',o,'heading',heading
          x=x+xo
          y=y+yo
          
          wellDiam=value.Item1.Item2[ii].Item3
          #print x,y,wellDiam
          if (x&lt;wellDiam) and (x&gt;0) and (y&lt;wellDiam) and (y&gt;0):
            x=x+allCoor[ii][2]
            y=y+allCoor[ii][3]
          else:
            #print 'not drawing dot for animal',ii
            x=0
            y=0

        else:
          x=p[0]+allCoor[ii][2] #add offsets of current dish
          y=p[1]+allCoor[ii][3]
        

        x,y=transf(x,y,hArr) ##projector-camera calibration

        x=toGL(x,xMax)
        y=-toGL(y,yMax)

        toDraw.append([x,y])
        wellStr = "%0.f %0.f" % (x,y)
        drawStr.append(wellStr)


  ar=Array[Vector3]([Vector3(well[0],well[1],sp) for well in toDraw])

  return Tuple.Create(" ".join(allwells),ar,Single(bgCol),Single(DotCol)," ".join(drawStr))

def unload():
  global allCoor,xMax,yMax,oldCoor,fr,posList
  allCoor=None
  xMax=None
  yMax=None
  oldCoor=None
  fr=None
  posList=None</q1:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Timer">
          <DueTime>PT0S</DueTime>
          <Period>PT1S</Period>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>AnimalTracking</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:Crop">
                <q2:RegionOfInterest>
                  <q2:X>1642</q2:X>
                  <q2:Y>868</q2:Y>
                  <q2:Width>382</q2:Width>
                  <q2:Height>382</q2:Height>
                </q2:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property name="RegionOfInterest" selector="Source.Item2.Item1,Source.Item2.Item2,Source.Item2.Item3,Source.Item2.Item3" />
              </PropertyMappings>
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:FindContours">
                <q2:Mode>External</q2:Mode>
                <q2:Method>ChainApproxNone</q2:Method>
                <q2:Offset>
                  <q2:X>0</q2:X>
                  <q2:Y>0</q2:Y>
                </q2:Offset>
                <q2:MinArea>4</q2:MinArea>
                <q2:MaxArea>500</q2:MaxArea>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="ToList" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item3</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item4</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q5:HeadingFromOrientation" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>14</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>12</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>5</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>12</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>trajectory file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Switch" />
            </Expression>
            <Expression xsi:type="WindowWorkflow">
              <Name>PaddedTra</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Repeat" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="ToList" />
                  </Expression>
                  <Expression xsi:type="q1:PythonTransform">
                    <q1:Script>from System import TimeSpan, DateTime, DayOfWeek
import datetime
#from clr import Convert
# The numbers in the list specify the hours when recording starts daily

@returns(TimeSpan)
def process(inputs):

  #currentTime=datetime.datetime.now()
  #yield currentTime.strftime('%Y%m%d%H%M%S')
#d = DateTime(*dt.timetuple()[:6])

  dtList = [datetime.datetime.strptime(x,'%Y-%m-%dT%H_%M_%S') for x in inputs]
  schedules = [DateTime(*x.timetuple()[:6]) for x in dtList]

  now = DateTime.Now
  #dayofweek = now.DayOfWeek

  # special cases for weekend (remove if not needed)
  #if dayofweek == DayOfWeek.Sunday:
   # target = DateTime.Today.AddDays(1) + schedules[0]
  #elif dayofweek == DayOfWeek.Saturday:
    #target = DateTime.Today.AddDays(2) + schedules[0]
  #else:
  try:
    #timeofday = now.TimeOfDay
    index = next(i for i,x in enumerate(schedules) if x &gt; now)
    target = schedules[index]
  except StopIteration:
    pass
  #  target = DateTime.Today.AddDays(1) + schedules[0]

  return target - now</q1:Script>
                  </Expression>
                  <Expression xsi:type="SelectMany">
                    <Name>Timer</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="Timer">
                            <DueTime>PT23H59M58.9288469S</DueTime>
                            <Period>PT0S</Period>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="ExternalizedTimeSpanOfTimer">
                          <MemberName>DueTime</MemberName>
                          <Name>DueTime</Name>
                          <Value>PT0S</Value>
                        </Expression>
                      </Nodes>
                      <Edges>
                        <Edge>
                          <From>0</From>
                          <To>3</To>
                          <Label>Source1</Label>
                        </Edge>
                        <Edge>
                          <From>2</From>
                          <To>1</To>
                          <Label>Source1</Label>
                        </Edge>
                        <Edge>
                          <From>3</From>
                          <To>2</To>
                          <Label>Source1</Label>
                        </Edge>
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>tra</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="SubscribeWhen" />
                  </Expression>
                  <Expression xsi:type="q3:CsvReader">
                    <q3:FileName>E:\00_bonsai_ffmpeg_out\longRec\stimTimes.csv</q3:FileName>
                    <q3:ScanPattern>%s</q3:ScanPattern>
                    <q3:SkipRows>0</q3:SkipRows>
                  </Expression>
                  <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
                    <MemberName>FileName</MemberName>
                    <Name>fnTim</Name>
                    <Value>E:\00_bonsai_ffmpeg_out\longRec2\stimTimes.csv</Value>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>1</From>
                    <To>0</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>3</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>4</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>4</From>
                    <To>6</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>5</From>
                    <To>6</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>6</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>7</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>8</From>
                    <To>7</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\trajectories\trajectory_20170919_SkypePair_and_knot_halfSpeedSize4.txt</q3:FileName>
              <q3:ScanPattern>%s,%f,%f,%f,%f,%f</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ReplaySubject">
              <Name>tra</Name>
              <BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Take">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>fnTrajectory</Name>
              <Value>E:\00_bonsai_ffmpeg_out\trajectories\trajectory_20180508_SkypePermutation_wholeDay_halfSpeed_SunRiseSet.csv</Value>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Merge" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ROI file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="ToList" />
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\ROIdef2018-05-18T21_48_52.csv</q3:FileName>
              <q3:ScanPattern>%i %i %i %i %i %i</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
              <Value>E:\00_bonsai_ffmpeg_out\ROIdef2018-05-30T18_20_10.csv</Value>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>calibration file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>split_hMat</q1:Name>
              <q1:Script>from System import Array
@returns(Array)
def process(value):
  return Array[float]([float(el) for el in value.split()])</q1:Script>
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\calibrationOut2018-05-18T21_51_11.csv</q3:FileName>
              <q3:ScanPattern>%s</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
              <Value>E:\00_bonsai_ffmpeg_out\calibrationOut2018-05-30T18_21_13.csv</Value>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Threshold">
          <q2:ThresholdValue>15</q2:ThresholdValue>
          <q2:MaxValue>255</q2:MaxValue>
          <q2:ThresholdType>Binary</q2:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>pairList</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>splitPairList</q1:Name>
              <q1:Script>@returns(list)
def process(value):
  pairList=[]
  for l in value:
    pairList.append([int(x) for x in l.split()])
  return pairList</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="ToList" />
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\pairLists\PairList_20170919_SkypePair_and_knot.csv</q3:FileName>
              <q3:ScanPattern>%s</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
              <Value>E:\00_bonsai_ffmpeg_out\pairLists\PairList_20170919_SkypePair_and_knot.csv</Value>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="ReplaySubject">
        <Name>DataPath</Name>
        <BufferSize xsi:nil="true" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="StringProperty">
          <Value>E:\00_bonsai_ffmpeg_out\longRec2\</Value>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:BackgroundSubtraction">
          <q2:BackgroundFrames>120</q2:BackgroundFrames>
          <q2:AdaptationRate>0.0005</q2:AdaptationRate>
          <q2:ThresholdValue>0</q2:ThresholdValue>
          <q2:ThresholdType>ToZero</q2:ThresholdType>
          <q2:SubtractionMethod>Dark</q2:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q6:DiscriminatedUnion" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Image</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q7:uEyeCapture">
          <q7:DeviceId xsi:nil="true" />
          <q7:ConfigFile>getCircles\2048x1280_30fps_slowClock_4.9.ini</q7:ConfigFile>
        </Combinator>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>3</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>2</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>3</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>22</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>22</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>3</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>13</To>
        <Label>Source4</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>3</To>
        <Label>Source4</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>13</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>13</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>18</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>20</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>21</From>
        <To>16</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>21</From>
        <To>20</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>22</From>
        <To>10</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>23</From>
        <To>21</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>23</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Reactive.Switch, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.ImageWriter, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Vision.ImageWriter, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.SubscribeWhen, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Timer, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Take, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.TextWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.IO.TextWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.AddBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.StringProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonSource, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.ExpressionTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Index, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TimeSpanWindow, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedTimeSpan`1[[Bonsai.Reactive.TimeSpanWindow, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.DrawMesh, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateUniform, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateVertexBuffer, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.FloatProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.AccumulateBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.MultiplyBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.DrawArrays, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateFrame, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.InputMappingBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.ToList, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.joh.Vision.HeadingFromOrientation, BonsaiPackage5, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Repeat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedTimeSpan`1[[Bonsai.Reactive.Timer, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvReader, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.IO.CsvReader, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Merge, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Threshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.DiscriminatedUnion, BonsaiPackage1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.uEye.uEyeCapture, Bonsai.uEye, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>